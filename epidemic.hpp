#ifndef EPIDEMIC_HPP
#define EPIDEMIC_HPP
#include <cassert>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <vector>

//@@@@@@@@@@@@@@ chiedi a cate di leggerti le scritte e correggerti l'inglese!!!

namespace pf {

template <typename type>
struct Population {
  type S;
  type I;
  type R;
};

class Epidemic {
 private:
  ////////////////////////////////////////////////////////////////////////////////
  // Epidemic parameter beta expresses the infection rate
  ////////////////////////////////////////////////////////////////////////////////
  const double beta_;

  ////////////////////////////////////////////////////////////////////////////////
  // Epidemic parameter gamma expresses the recovery rate
  ////////////////////////////////////////////////////////////////////////////////
  const double gamma_;

  ////////////////////////////////////////////////////////////////////////////////
  // Initial state of population expressed in double
  ////////////////////////////////////////////////////////////////////////////////
  const Population<double> initial_population_;

  ////////////////////////////////////////////////////////////////////////////////
  // Number of days the evolution will last
  ////////////////////////////////////////////////////////////////////////////////
  const int T_;

  ////////////////////////////////////////////////////////////////////////////////
  // Total number of people in the population
  ////////////////////////////////////////////////////////////////////////////////
  const int N_;

  ////////////////////////////////////////////////////////////////////////////////
  // Storage of each state of the population per day of type double
  ////////////////////////////////////////////////////////////////////////////////
  std::vector<Population<double> > simulation_double_;

  ////////////////////////////////////////////////////////////////////////////////
  // Percentage of infected people beyond whith the lockdown occurs
  ////////////////////////////////////////////////////////////////////////////////
  const double critic_level_;

  ////////////////////////////////////////////////////////////////////////////////
  // Duration of the lockdown
  ////////////////////////////////////////////////////////////////////////////////
  const int lockdown_duration_;

  ////////////////////////////////////////////////////////////////////////////////
  // A function that calculates the value of the parameters S I and R which
  // describe the state of the population in the following day of the epidemic
  // from the values of S I and R from the previous day. The calculation is
  // based on the discretization of the equations of the SIR model. The
  // calculated values are of type double to garantee a greater calculation
  // precision.
  ////////////////////////////////////////////////////////////////////////////////
  Population<double> calculate(const Population<double> &) const;

  ////////////////////////////////////////////////////////////////////////////////
  // A function that calculates the value of the parameters S I and R which
  // describe the state of the population in the following day when the
  // population is in lockdown. In this case the number of susceptible people S
  // remains the same, the number of recovered people R follows the
  // discretization of the equations of the SIR model and the number of
  // infectious people I reduces such in a way that the number of people in
  // total N_ remains constant. The calculated values are of type double to
  // garantee a greater calculation precision.
  ////////////////////////////////////////////////////////////////////////////////
  Population<double> lockdown(Population<double> const &) const;

  ////////////////////////////////////////////////////////////////////////////////
  // A function that changes the type of S I and R of a particular day of the
  // epidemic from double to int.
  ////////////////////////////////////////////////////////////////////////////////
  Population<int> round(Population<double> const &) const;

  ////////////////////////////////////////////////////////////////////////////////
  // A function that garantees that the total number of people tot in the
  // population remains const equal to N_. In case tot is greather than N_ the
  // number of recovered people R is reduced. In case tot is lower than N_ the
  // number of infectious people I is increased. In this way the number of
  // infectious can't be  underestimate.
  ////////////////////////////////////////////////////////////////////////////////
  Population<int> keepTotalConstant(Population<int> const &) const;

 public:
  // constructor
  Epidemic(const double, const double, Population<double> const &, const int);

  ////////////////////////////////////////////////////////////////////////////////
  // A function that changes all states of the population stored in
  // simulation_double_ from double to int.
  ////////////////////////////////////////////////////////////////////////////////
  std::vector<Population<int> > evolution() const;

  ////////////////////////////////////////////////////////////////////////////////
  // Getter methods
  ////////////////////////////////////////////////////////////////////////////////
  std::vector<Population<double> > get_simulation_double() const;

  int getN() const;
  int getT() const;

  ////////////////////////////////////////////////////////////////////////////////
  // A function that prints in output the result expressed in int of the
  // development of the epidemic
  ////////////////////////////////////////////////////////////////////////////////
  void print_results() const;
};
}  // namespace pf

#endif
